#! /usr/bin/env python
import rosservice
import rospy
from grasping_type_inference_msgs.srv import *
from grasping_type_inference.grasping_object.grasping_object import GraspingObject
from grasping_type_inference.grasping_object.orientation import Orientation

s = None


def get_grasping_type(req):
    orientation = Orientation(req.object.facing_robot_face, req.object.bottom_face)
    grasping_object = GraspingObject(req.object.type, orientation)

    result = grasping_object.get_most_probable_grasping_type()

    solution = None
    max_prob = 0

    for ground_atom in result.results.keys():
        if result.results[ground_atom] >= max_prob:
            solution = ground_atom
            max_prob = result.results[ground_atom]

    # The MLN inference causes that the service dies sometimes without throwing an exception.
    # However until the real cause will be found out, a reboot of the service fixes it.
    if __is_service_running__():
        try:
            __start_service__()
        except:
            print''

    return GetGraspingTypeResponse(solution)


def grasping_type_inference_server():
    rospy.init_node('grasping_type_inference_server')
    __start_service__()
    print "Ready to infer the grasping type"
    rospy.spin()

def __start_service__():
    global s
    s = rospy.Service('get_grasping_type', GetGraspingType, get_grasping_type)


def __is_service_running__():
    return '/get_grasping_type' not in rosservice.get_service_list()


if __name__ == "__main__":
    grasping_type_inference_server()